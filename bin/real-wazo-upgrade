#!/bin/bash
# Copyright 2011-2019 The Wazo Authors  (see the AUTHORS file)
# SPDX-License-Identifier: GPL-3.0-or-later

PATH=/bin:/usr/bin:/sbin:/usr/sbin
lib_directory="/usr/share/wazo-upgrade"
mirror_xivo="http://mirror.wazo.community"
: ${WAZO_CONFD_PORT:='9486'}

# force all debian upgrade to non interactive mode
export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none

differed_action() {
	local state=$1
	for script in "$lib_directory/$state.d"/*; do
		echo "Executing upgrade script $script..."
		$script
	done
}

pre_stop() {
	for script in "$lib_directory/pre-stop.d"/*; do
		echo "Executing upgrade script $script..."
		$script
		if [ $? -ne 0 ]; then
			cat <<-EOF
			Failed to execute $script
			Please, fix this issue before re-executing wazo-upgrade
			EOF
			exit -1
		fi
	done
}

post_stop() {
	differed_action post-stop
}

pre_start() {
	differed_action pre-start
}

post_start() {
	differed_action post-start
}

wait_for_lock(){
	WAIT_TIMEOUT=15
	WAIT_INTERVAL=1
	while fuser /var/lib/dpkg/lock > /dev/null 2>&1; do
		sleep ${WAIT_INTERVAL}
		WAIT_TIMEOUT=$((WAIT_TIMEOUT - WAIT_INTERVAL))
		if [ "$WAIT_TIMEOUT" -eq 0 ]; then
			echo "Could not get dpkg lock"
			return 1
		fi
	done
}

execute() {
	cmd=$*
	wait_for_lock
	if [ $? -ne 0 ]; then
		start_xivo
		exit -1
	fi
	$cmd
	if [ $? -ne 0 ]; then
		start_xivo
		exit -1
	fi
}

stop_xivo() {
	wazo-service stop
	wazo-service disable
}

start_xivo() {
	wazo-service enable
	wazo-service restart
}

upgrade() {
	export XIVO_VERSION_INSTALLED=$(xivo_version_installed)
	export XIVO_VERSION_CANDIDATE=$(xivo_version_candidate)
	pre_stop
	stop_xivo
	post_stop
	echo "Upgrading wazo..."
	execute apt-get install -o Dpkg::Options::="--force-confnew" -y postgresql-11
	execute apt-get install -o Dpkg::Options::="--force-confnew" -y wazo-platform
	execute apt-get install -o Dpkg::Options::="--force-confnew" -y xivo-config
	execute apt-get install -o Dpkg::Options::="--force-confnew" -y rabbitmq-server
	execute apt-get install -o Dpkg::Options::="--force-confnew" -y xivo-libdao
	execute apt-mark auto postgresql-11 xivo-config rabbitmq-server xivo-libdao
	execute apt-get dist-upgrade -y
	execute apt-get autoremove -y
	upgrade_dahdi_linux_modules 4.9
	pre_start
	start_xivo
	post_start
	wazo-check-conffiles
}

upgrade_dahdi_linux_modules(){
	VERSION=$1
	kernel_release=$(ls /lib/modules/ | grep ^$VERSION)
	for kr in $kernel_release; do
		execute apt-get install -o Dpkg::Options::="--force-confnew" -y dahdi-linux-modules-${kr}
	done
}

display_xivo_version() {
	echo "installed version : $(xivo_version_installed)"
	echo "proposed update	: $(xivo_version_candidate)"
}
debian_version_installed() {
	cut -d. -f1 /etc/debian_version
}
is_stretch() {
	[ $(debian_version_installed) -eq 9 ]
}
is_last_stretch() {
	is_stretch && [ "$(xivo_version_installed)" = 19.12 -o "$(xivo_version_installed)" = 19.13 ]
}

is_grub_broken() {
	if [ -f /boot/grub/device.map ]; then
		for disk in $(awk '{print $2}' /boot/grub/device.map) ; do
			if [ ! -e "$disk" ] ; then
				return 0
			fi
		done
	fi
	install_device=$(debconf-show grub-pc | grep 'grub-pc/install_devices:' | cut -b3- | cut -f2 -d\ )
	if [ "$install_device" -a ! -e "$install_device" ]; then
		return 0
	fi
	return 1
}

check_if_grub_is_broken() {
	if is_grub_broken; then
		cat <<-EOF
		*********************************************
		* You must install GRUB BEFORE rebooting:   *
		*                                           *
		* # apt-get install grub-pc                 *
		* # rm /boot/grub/device.map                *
		* # grub-install /dev/<boot_device>         *
		* # shutdown -r now                         *
		*                                           *
		* If you are often getting this error, you  *
		* should run "dpkg-reconfigure grub-pc".    *
		*                                           *
		*********************************************
		EOF
		exit
	fi
}

upgrading_system() {
	display_xivo_version
	display_asterisk_notice
	if is_last_stretch && [ $force -eq 0 ] ; then
		display_buster_notice
		return
	fi
	if [ $force -eq 0 ]; then
		read -p 'Would you like to upgrade your system (all services will be restarted) [Y/n]? ' answer
		answer="${answer:-Y}"
		if [ "$answer" != 'y' -a "$answer" != 'Y' ]; then
			exit
		fi
	fi
	upgrade
}

display_asterisk_notice() {
	ast_version=$(dpkg-query -W -f '${Version}' asterisk 2>/dev/null)
	case "$ast_version" in
		8:15.*)
			ast_major_version="15"
			;;
		*)
			ast_major_version="unknown"
			;;
	esac
	if dpkg --compare-versions "$ast_version" le 8:16; then
		cat <<-EOF

		Asterisk will be upgraded from version $ast_major_version to 16. You might be impacted if you have:

		* custom Asterisk configuration (other than custom dialplan)
		* custom application using AMI or ARI
		* custom Asterisk modules (e.g. codec_g729a.so)

		If you find yourself in one of these cases, you should make sure that
		your customizations still work with Asterisk 16. Please refer to
		http://documentation.wazo.community/en/stable/upgrade/18.12/asterisk_16.html
		for more information.

		EOF

		custom_modules=$(wazo-asterisk-custom-modules)
		if [ -n "$custom_modules" ]; then
			for module in $custom_modules; do
				mv "/usr/lib/asterisk/modules/$module" /tmp
			done
			cat <<-EOF
			WARNING: custom Asterisk modules detected:

			$custom_modules

			Since these modules will not work with Asterisk 16 and might cause major
			instability issues, they have been moved from /usr/lib/asterisk/modules to
			/tmp. To continue using these modules, you will have to install (or recompile)
			the Asterisk 16 version of these modules.

		EOF
		fi
	fi
}

display_buster_notice() {
	cat <<-EOF

	****************************************************************************
	*                                                                          *
	*  The Debian GNU/Linux system must be upgraded from version 9 (Stretch)    *
	*  to 10 (Buster). This is mandatory to upgrade to newer versions of Wazo. *
	*  To do this, you must run the following command:                         *
	*                                                                          *
	*    wazo-dist-upgrade                                                     *
	*                                                                          *
	*  To keep Debian Stretch and Wazo $(xivo_version_installed) but benefit from security updates: *
	*                                                                          *
	*    wazo-upgrade -f                                                       *
	*                                                                          *
	****************************************************************************

EOF
}

xivo_package() {
	for package in xivo xivo-base wazo-platform ; do
		apt-cache policy -q $package | awk '{ if ($1 == "Installed:" && $2 != "(none)") print "'"$package"'"}'
	done | head -n 1
}

xivo_version_installed() {
	echo "$(LANG='C' apt-cache policy $(xivo_package) | grep Installed | grep -oE '[0-9]{2}\.[0-9]+(\.[0-9]+)?' | head -n1)"
}

xivo_version_candidate() {
	echo "$(LANG='C' apt-cache policy wazo-platform | grep Candidate | grep -oE '[0-9]{2}\.[0-9]+(\.[0-9]+)?' | head -n1)"
}

check_wizard_has_been_run() {

	if ! is_xivo_configured; then
		echo "ERROR: You must configure Wazo by running the web wizard before using wazo-upgrade"
		exit 1
	fi
}

is_xivo_configured() {
	if [ ! -f "/var/run/xivo-confd/xivo-confd.pid" ] && [ ! -f "/var/run/wazo-confd/wazo-confd.pid" ]; then
		echo "ERROR: wazo-confd is not running: cannot check if the web wizard has been run."
		exit 1
	fi
	[ -n "$(curl -skX GET --header 'Accept: application/json' "https://localhost:$WAZO_CONFD_PORT/1.1/wizard" | grep '\"configured\"[[:space:]]*:[[:space:]]*true')" ]
}

is_wazo_dev_or_rc_buster() {
    return $(grep -Eq "^deb http://mirror.wazo.community/debian/ wazo-(dev|rc)-buster main" /etc/apt/sources.list.d/wazo-dist.list)
}

is_wazo_dev_or_rc_stretch() {
    return $(grep -Eq "^deb http://mirror.wazo.community/debian/ wazo-(dev|rc)-stretch main" /etc/apt/sources.list.d/wazo-dist.list)
}

usage() {
	cat <<-EOF
	usage: wazo-upgrade [-d] [-f] [-h]
		-d: only download packages
		-f: force yes
		-h: print usage
	EOF
}

while getopts :dfh opt
do
	case ${opt} in
		d) download_only=1;;
		f) force=1;;
		h)
			usage
			exit 0
		;;
		'?')
			echo "${0} : option ${OPTARG} is not valid" >&2
			usage
			exit -1
		;;
	esac
done
download_only="${download_only:-"0"}"
force="${force:-"0"}"

check_wizard_has_been_run

if [ $(xivo_version_installed) \< '18.04' ]; then
    if ! is_wazo_dev_or_rc_stretch; then
        echo "Switching to pelican-stretch distribution"
        wazo-dist -m pelican-stretch
    fi
    apt-get update > /dev/null
fi

if [ $download_only -eq 0 ]; then
	upgrading_system
else
	apt-get -y -d dist-upgrade
fi
